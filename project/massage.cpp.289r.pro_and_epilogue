
;; Function getMassage (_Z10getMassagev, funcdef_no=0, decl_uid=2303, cgraph_uid=1, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
Stack clash no probe small stack adjustment in prologue.
Stack clash residual allocation in prologue.
Stack clash frame pointer needed.
Stack clash not noreturn prologue.
scanning new insn with uid = 20.
scanning new insn with uid = 21.
scanning new insn with uid = 16.
scanning new insn with uid = 17.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns


getMassage

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 6 [bp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={3d,3u} r7={3d,5u} r19={1d,1u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 34{23d,11u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax]
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 17 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg/f:DI 6 bp)) "massage.cpp":2:1 -1
     (nil))
(insn/f 17 16 18 2 (set (reg/f:DI 6 bp)
        (reg/f:DI 7 sp)) "massage.cpp":2:1 -1
     (nil))
(note 18 17 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 18 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 13 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7ff14396acf0 *.LC0>)) "massage.cpp":3:12 66 {*movdi_internal}
     (nil))
(insn 13 5 19 2 (use (reg/i:DI 0 ax)) "massage.cpp":4:1 -1
     (nil))
(note 19 13 20 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f 20 19 21 2 (set (reg/f:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "massage.cpp":4:1 -1
     (expr_list:REG_CFA_DEF_CFA (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8]))
        (nil)))
(jump_insn 21 20 22 2 (simple_return) "massage.cpp":4:1 -1
     (nil)
 -> simple_return)
;;  succ:       EXIT [always] 
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]

(barrier 22 21 15)
(note 15 22 0 NOTE_INSN_DELETED)
